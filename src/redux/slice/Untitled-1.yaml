openapi: 3.0.0
info:
  title: Sample API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.1.9
servers:
  - url: http://localhost:8000/api/v1
    description: Local host Testing api
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
paths:
  /users/register:
    post:
      summary: Registration of users.
      description: Optional extended description in CommonMark or HTML.
      tags:
        - users
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                avtar:
                  type: string
                  format: binary
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
  /users/login:
    post:
      summary: Login  users.
      description: Optional extended description in CommonMark or HTML.
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
  /users/logout:
    post:
      summary: Logout  users.
      description: Optional extended description in CommonMark or HTML.
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
               
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
  /users/getNewToken:
    post:
      summary: New tokens  generate.
      description: Optional extended description in CommonMark or HTML.
      tags:
        - users               
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string 
  /users/googleLogin:
    get:
      summary: Google Login.
      description: Optional extended description in CommonMark or HTML.
      tags:
        - users               
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
  /users/facebookLogin:
    get:
      summary: facebook Login.
      description: Optional extended description in CommonMark or HTML.
      tags:
        - users               
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string  
  /categories/list-categories:
    get:
      summary: Categories.
      description: Optional extended description in CommonMark or HTML.
      tags:
        - categories  
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: pageSize
          schema:
            type: integer             
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string 
  /categories/update-category/{category_id}:
    put:
      summary: Categories.
      description: Optional extended description in CommonMark or HTML.
      tags:
        - categories  
      parameters:
        - in: path
          name: category_id
          schema:
            type: integer
          required: true
          description: Update category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string     
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string                                                                                     var jwt = require('jsonwebtoken');
const Users = require('../model/users.model');

const auth = (roles = []) => async (req, res, next) => {

    try {

        const token = req.cookies.accrestoken || req.header('Authorization')?.replace("Bearer ", "")
        // console.log(token);

        if (!token) {
            return res.status(400).json({
                success: false,
                message: "Please Provide AccresToken"
            });
        }


        try {
            const validateToken = await jwt.verify( token, "abc123")

            const user = await Users.findById(validateToken._id);

            console.log(user, "user");
            if (!roles.some((v) => v === user.role)) {
                return res.status(400).json({
                    success: false,
                    message: "You have not access"
                });
            }

            req.user = user
            next()

            // console.log("validateToken", validateToken);
        } catch (error) {

            return res.status(400).json({
                success: false,
                message: "Invalid Token"
            });

        }

    } catch (error) {
        console.error("Error:", error);
        res.status(500).json({
            success: false,
            message: "Internal server error",
        });
    }

}

module.exports = auth